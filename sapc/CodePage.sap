class CodePage
{
    // Кодировки
    static final enum
    {
	KOI,
	DOS,
	WIN
    };
    
    
    // Определить кодировку. Читает весь входной поток
    static int detectCodePage(Stream s)
    {
        int d=0, k=0, w=0;
	byte[] data=new byte[256];
	int rd;
	
	while ( (rd=s.readBytes(data, 0, data.length)) > 0 )
	{
	    for (int i=0; i<rd; i++)
    	    {
        	int b=((int)data[i]) & 0xff;
    		switch (b)
        	{
            	    case 0x80: d++; break;
            	    case 0xa0: d++; break;
            	    case 0x8e: d++; break;
            	    case 0xae: d++; break;
            	    case 0x88: d++; break;
            	    case 0xa8: d++; break;
            	    case 0x92: d++; break;
            	    case 0xe2: d++; break;
            	    case 0xe1: k++; break;
            	    case 0xc1: k++; break;
            	    case 0xef: k++; break;
            	    case 0xcf: k++; break;
            	    case 0xe9: k++; break;
            	    case 0xc9: k++; break;
            	    case 0xf4: k++; break;
            	    case 0xd4: k++; break;
            	    case 0xc0: w++; break;
            	    case 0xe0: w++; break;
            	    case 0xce: w++; break;
            	    case 0xee: w++; break;
            	    case 0xc8: w++; break;
            	    case 0xe8: w++; break;
            	    case 0xd2: w++; break;
            	    case 0xf2: w++; break;
        	}
    	    }
        }
	
        if ( (d>k) && (d>w) )
            return DOS; else
        if ( (k>d) && (k>w) )
            return KOI; else
            return WIN;
    }
    
    
    // Перекодировать символ
    static byte xcode(byte c, int cp)
    {
	if (c >=0 ) return c;	// 7bit
	return xlat[cp][c & 0x7f];
    }
    
    
    static final String[] name=new String{"KOI", "DOS", "WIN"};
    
    static final byte[][] xlat=new byte[]{
	// KOI
	new byte{
	-108,-125, -86,-113,-112, -87,-109,-124,-110,-111,-107, -81, -84, -85, -83, -82,
	-128,-127,-126, -76, -66, -71, -69, -73, -77, -78, -65, -75, -72, -67, -70, -74,
	 -99,-118, -91, -79, -90,-103,-120,-121,-117, -92, -93,-104,-114,  45,-116,-106,
	-105,-100,-123, -80,-122,-119, -95, -94,-101, -97, -96,-102, -88, -89, -98, -68,
	  -2, -32, -31, -10, -28, -27, -12, -29, -11, -24, -23, -22, -21, -20, -19, -18,
	 -17,  -1, -16, -15, -14, -13, -26, -30,  -4,  -5, -25,  -8,  -3,  -7,  -9,  -6,
	 -34, -64, -63, -42, -60, -59, -44, -61, -43, -56, -55, -54, -53, -52, -51, -50,
	 -49, -33, -48, -47, -46, -45, -58, -62, -36, -37, -57, -40, -35, -39, -41, -38
	},
	// DOS
	new byte{
	 -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49,
	 -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33,
	 -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17,
	-108,-125, -86,-113,-112, -87,-109,-124,-110,-111, -96, -81, -84, -85, -83, -82,
	-128,-127,-126, -76, -66, -71, -69, -73, -77, -78, -65, -68, -72, -67, -70, -74,
	 -99,-118, -91,-105, -90,-103,-120,-121,-117, -92, -93,-104,-114,-115,-116,-106,
	 -16, -15, -14, -13, -12, -11, -10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1,
	 -80, -79,  43,  43,  43,  43,  43,  43,-101,  43,  43,  43,  43,  43, -98,  32
	},
	// WIN
	new byte{
	-128,-127,-126,-125,-124,-123,-122,-121,-120,-119,-118,-117,-116,-115,-114,-113,
	-112,-111,-110,-109,-108,-107,-106,-105,-104,-103,-102,-101,-100, -99, -98, -97,
	 -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81,
	 -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65,
	 -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49,
	 -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33,
	 -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17,
	 -16, -15, -14, -13, -12, -11, -10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1
	}
    };
}

