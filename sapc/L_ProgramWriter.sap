
class L_ProgramWriter
{
    static boolean WriteProgram(String main_class)
    {
	sapc.debug("Writing header\n");
	// Секция App
	CG_Stream App=new CG_Stream();
	
	// Magic "#!sapvm\n"
	App.putByte('#');
	App.putByte('!');
	App.putByte('s');
	App.putByte('a');
	App.putByte('p');
	App.putByte('v');
	App.putByte('m');
	App.putByte('\n');
	
	// Кол-во классов
	App.putShort((short)sapc.prog.classes.size());
	
	// Кол-во методов
	App.putShort((short)sapc.prog.L_GlobalMethodsTab.size());
	
	// Размер статических полей
	App.putShort((short)sapc.prog.L_static_fields_size);
	
	// Кол-во статических ссылок
	App.putShort((short)sapc.prog.L_n_static_refs);
	
	// Положение секции Boot
	int Boot_AT=App.size();
	App.putInt(0);
	
	// Положение секции Classes
	int Classes_AT=App.size();
	App.putInt(0);
	
	// Положение секции InstanceOfTab
	int InstanceOfTab_AT=App.size();
	App.putInt(0);
	
	// Положение секции VirtualTab
	int VirtualTab_AT=App.size();
	App.putInt(0);
	
	// Положение секции InterfaceBindTab
	int InterfaceBindTab_AT=App.size();
	App.putInt(0);
	
	// Положение секции RefFieldsTab
	int RefFieldsTab_AT=App.size();
	App.putInt(0);
	
	// Положение секции Methods
	int Methods_AT=App.size();
	App.putInt(0);
	
	// Положение секции Code
	int Code_AT=App.size();
	App.putInt(0);
	
	// Положение секции Debug
	int Debug_AT=App.size();
	App.putInt(0);
	
	// Положение секции LineNumbers
	int LineNumbers_AT=App.size();
	App.putInt(0);
	
	// Положение секции DebugStringPool
	int DebugStringPool_AT=App.size();
	App.putInt(0);
	
	
	
	
	// Секция Debug
	CG_Stream Debug=new CG_Stream();
	CG_Stream LineNumbers=new CG_Stream();
	StringPool DebugStrings=new StringPool();
	
	
	
	sapc.debug("Writing classes\n");
	// Секция классов (и 4 необходимые подсекции)
	CG_Stream Classes=new CG_Stream();
	CG_Stream InstanceOfTab=new CG_Stream();
	CG_Stream VirtualTab=new CG_Stream();
	CG_Stream InterfaceBindTab=new CG_Stream();
	CG_Stream RefFieldsTab=new CG_Stream();
	for (int i=0; i<sapc.prog.classes.size(); i++)
	{
	    I_Class cls=(I_Class)sapc.prog.classes.elementAt(i);
	    
	    // Debug: Имя класса
	    Debug.putShort(DebugStrings.AddString(cls.name));
	    
	    // Размер полей
	    Classes.putShort((short)cls.L_fields_size);
	    
	    // Расположение таблицы InstanceOfTab относительно начала секции
	    Classes.putShort((short)InstanceOfTab.size());
	    
	    // Расположение таблицы VirtualTab относительно начала секции
	    Classes.putShort((short)VirtualTab.size());
	    
	    // Расположение таблицы InterfaceBindTab относительно начала секции
	    Classes.putShort((short)InterfaceBindTab.size());
	    
	    // Расположение таблицы RefFieldsTab
	    Classes.putShort((short)RefFieldsTab.size());
	    
	    
	    // Записываем таблицу InstanceOf
	    for (int j=0; j<cls.L_InstanceOfTab.size(); j++)
	    {
		I_Class c=(I_Class)cls.L_InstanceOfTab.elementAt(j);
		
		if (c.L_number!=0) InstanceOfTab.putShort((short)c.L_number);
	    }
	    InstanceOfTab.putShort((short)0);	// последняя запись - Object
	    
	    
	    // Записываем таблицу VirtualTab
	    //sapc.debug("cls="+cls.name+" virtualtab="+cls.L_VirtualTab);
	    for (int j=0; j<cls.L_VirtualTab.size(); j++)
	    {
		I_Method m=(I_Method)cls.L_VirtualTab.elementAt(j);
		
		VirtualTab.putShort((short)m.L_MethodNumber);
	    }
	    
	    
	    // Записываем таблицу InterfaceBindTab
	    for (int j=0; j<cls.L_InterfaceTab.size(); j++)
	    {
		I_Method m=(I_Method)cls.L_InterfaceTab.elementAt(j);
		
		// Ищем внутри виртуальных методов
		int n=-1;
		for (int k=0; k<cls.L_VirtualTab.size(); k++)
		{
		    I_Method m1=(I_Method)cls.L_VirtualTab.elementAt(k);
		    
		    if (m.spec().equals(m1.spec()))
		    {
			// Нашли
			n=k;
			break;
		    }
		}
		if (n==-1)
		{
		    sapc.error("Can't bind interface method '"+m.name+"' to class '"+cls.name+"' !\n");
		    return false;
		}
		
		// Пишем
		InterfaceBindTab.putShort((short)m.L_MethodNumber);
		InterfaceBindTab.putShort((short)n);
	    }
	    InterfaceBindTab.putShort((short)-1);	// конец
	    InterfaceBindTab.putShort((short)-1);
	    
	    
	    // Записываем таблицу RefFieldsTab - таблица размещения полей-ссылок
	    I_Class cur=cls;
	    sapc.debug("RefFieldsTab for "+cur.name+":\n");
	    while (cur!=null)
	    {
		for (int j=0; j<cur.fields.size(); j++)
		{
		    I_Var field=(I_Var)cur.fields.elementAt(j);
		    
	    	    if ( (field.type.isRef()) &&
			 (!field.is_static) )
		    {
			// Поле-ссылка
			RefFieldsTab.putShort((short)field.L_address);
			sapc.debug("  "+field.name+": "+field.L_address+"\n");
		    }
		}
		cur=cur.superclass;
	    }
	    RefFieldsTab.putShort((short)-1);	// конец
	}
	
	
	sapc.debug("Writing methods\n");
	// Секция методов (и байткода)
	CG_Stream Methods=new CG_Stream();
	CG_Stream Code=new CG_Stream();
	for (int i=0; i<sapc.prog.L_GlobalMethodsTab.size(); i++)
	{
	    I_Method m=(I_Method)sapc.prog.L_GlobalMethodsTab.elementAt(i);
	    
	    sapc.debug("  "+m.L_ParentClass.name+"."+m.name+"\n");
	    // Debug: Принадлежность метода к классу
	    Debug.putShort((short)m.L_ParentClass.L_number);
	    // Debug: Имя метода
	    Debug.putShort(DebugStrings.AddString(m.name));
	    // Debug: Положение таблицы строк
	    Debug.putInt(LineNumbers.size());
	    
	    
	    // Флаги
	    byte flags=0x00;
	    if (m.is_native) flags=(byte)(flags | 0x80);
	    if (m.is_static) flags=flags | 0x01;
	    Methods.putByte(flags);
	    
	    // Резерв
	    Methods.putByte((byte)0);
	    
	    // Информация для исполнения
	    if (m.is_native)
	    {
		// Для нативного метода - хэш спецификатора
		String spec=m.L_ParentClass.name+"."+m.spec();
		int hash=NativeHash(spec);
		Methods.putInt(hash);
		
		StringBuffer buf=new StringBuffer();
		buf.appendString("0x");
		byte[] hex="0123456789abcdef".getBytes();
		for (int j=0; j<8; j++)
		{
		    buf.appendChar(hex[(hash >> 28) & 0x0f]);
		    hash=hash << 4;
		}
		sapc.debug("NativeHash: "+buf.toString()+" for '"+spec+"'\n");
	    } else
	    {
		// Для обычного метода - адрес кода
		Methods.putInt(Code.size());
	    }
	    
	    
	    // Код метода (если есть)
	    if (!m.is_native)
	    {
		// Размер фрейма
		Code.putShort((short)m.frame_size);
		
		// Начальное значение SP
		Code.putShort((short)m.start_SP);
		
		// Размер кода
		Code.putShort((short)m.compiled_code_size);
		
		// Сам код
		Code.putBytes(m.compiled_code, m.compiled_code_size);
		
		// Дополнительный байт, если требуется, чтобы выровнять по границе 2-х байт
		if ( (m.compiled_code_size & 0x01) != 0 )
		    Code.putByte((byte)0);
	    }
	    
	    
	    // Таблица строк
	    LineNumbers.putShort(DebugStrings.AddString(m.L_ParentClass.fname));	// имя файла
	    LineNumbers.putShort((short)(m.line_numbers_size/4));	// кол-во элементов в таблице
	    LineNumbers.putBytes(m.line_numbers, m.line_numbers_size);
	}
	
	
	sapc.debug("Writing boot\n");
	// Код загрузки
	CG_Stream Boot=new CG_Stream();
	{
	    // Заголовок
	    Boot.putShort((short)8);	// frame_size: this + op(for this)
	    Boot.putShort((short)4);	// start_SP
	    Boot.putShort((short)0);	// size - заполним позже
	    
	    // Сначала надо выполнить все методы <staticinit>
	    sapc.debug("STATIC_INIT:\n");
	    for (int i=0; i<sapc.prog.L_StaticInitOrder.size(); i++)
	    {
		I_Class cls=(I_Class)sapc.prog.L_StaticInitOrder.elementAt(i);
		I_Method staticinit=cls.FindMethod("<staticinit>");
		if (staticinit==null) continue;	// нет статической инициализации
		sapc.debug("  call '"+cls.name+".<staticinit>' frame_size="+staticinit.frame_size+"\n");
		
		Boot.putByte(OP.I_PUSH_0);
		Boot.putByte(OP.CALL_METHOD);
		Boot.putByte((byte)0);
		Boot.putShort((short)staticinit.L_MethodNumber);
		Boot.putByte( (byte)(OP.INT_OR_FLOAT | OP._POP) );
	    }
	    
	    // Ищем главный метод
	    I_Method main=sapc.prog.FindClass(main_class).FindMethod("main");
	    if (main==null)
	    {
		sapc.error("Method '"+main_class+".main()' not found !\n");
		return false;
	    }
	    
	    // Проверяем спецификатор
	    if ( (!main.spec().equals("main()V")) ||
		 (!main.is_static) )
	    {
		sapc.error("Method '"+main_class+".main' should be declared as 'static void main()' !\n");
		return false;
	    }
	    
	    sapc.debug("main call\n");
	    // Делаем вызов метода
	    Boot.putByte(OP.I_PUSH_0);
	    Boot.putByte(OP.CALL_METHOD);
	    Boot.putByte((byte)0);
	    Boot.putShort((short)main.L_MethodNumber);
    	    Boot.putByte( (byte)(OP.INT_OR_FLOAT | OP._POP) );
	    
	    // Выход из программы
	    Boot.putByte(OP.I_PUSH_0);
	    Boot.putByte(OP.RETURN);
	    
	    // Правим размер кода
	    Boot.putShortAt(4, (short)(Boot.size()-6));
	    
	    // Дополнение до кратности 2-м байтам
	    if ( (Boot.size() & 0x01) != 0 )
		Boot.putByte((byte)0);
	}
	
	
	sapc.debug("Writing StringPool\n");
	// Получаем поток для строк
	CG_Stream DebugStringPool=new CG_Stream();
	DebugStringPool.putShort((short)DebugStrings.data.size());
	for (int i=0; i<DebugStrings.data.size(); i++)
	{
	    DebugStringPool.putString(DebugStrings.StringAt(i));
	}
	sapc.debug("StringPool finished\n");
	
	// Последовательность в файле:
	// App
	// Boot
	// Classes
	// InstanceOfTab
	// VirtualTab
	// InterfaceBindTab
	// RefFieldsTab
	// Methods
	// Code
	// Debug
	// LineNumbers
	// DebugStringPool
	
	
	sapc.debug("Putting all sections together\n");
	// Собираем все в один буфер
	sapc.debug("  Boot ("+Boot.size()+" bytes)\n");
	App.putIntAt(Boot_AT, App.size());
	App.putBytes(Boot.bytes(), Boot.size());
	
	sapc.debug("  Classes ("+Classes.size()+" bytes)\n");
	App.putIntAt(Classes_AT, App.size());
	App.putBytes(Classes.bytes(), Classes.size());
	
	sapc.debug("  InstanceOfTab ("+InstanceOfTab.size()+" bytes)\n");
	App.putIntAt(InstanceOfTab_AT, App.size());
	App.putBytes(InstanceOfTab.bytes(), InstanceOfTab.size());
	
	sapc.debug("  VirtualTab ("+VirtualTab.size()+" bytes)\n");
	App.putIntAt(VirtualTab_AT, App.size());
	App.putBytes(VirtualTab.bytes(), VirtualTab.size());
	
	sapc.debug("  InterfaceBindTab ("+InterfaceBindTab.size()+" bytes)\n");
	App.putIntAt(InterfaceBindTab_AT, App.size());
	App.putBytes(InterfaceBindTab.bytes(), InterfaceBindTab.size());
	
	sapc.debug("  RefFieldsTab ("+RefFieldsTab.size()+" bytes)\n");
	App.putIntAt(RefFieldsTab_AT, App.size());
	App.putBytes(RefFieldsTab.bytes(), RefFieldsTab.size());
	
	sapc.debug("  Methods ("+Methods.size()+" bytes)\n");
	App.putIntAt(Methods_AT, App.size());
	App.putBytes(Methods.bytes(), Methods.size());
	
	sapc.debug("  Code ("+Code.size()+" bytes)\n");
	App.putIntAt(Code_AT, App.size());
	App.putBytes(Code.bytes(), Code.size());
	
	sapc.debug("  Debug ("+Debug.size()+" bytes)\n");
	App.putIntAt(Debug_AT, App.size());
	App.putBytes(Debug.bytes(), Debug.size());
	
	sapc.debug("  LineNumbers ("+LineNumbers.size()+" bytes)\n");
	App.putIntAt(LineNumbers_AT, App.size());
	App.putBytes(LineNumbers.bytes(), LineNumbers.size());
	
	sapc.debug("  StringPool ("+DebugStringPool.size()+" bytes)\n");
	App.putIntAt(DebugStringPool_AT, App.size());
	App.putBytes(DebugStringPool.bytes(), DebugStringPool.size());
	
	
	sapc.debug("Writing file\n");
	// Записываем в файл
	File F=new File(sapc.prog.OUT_DIR+main_class+".sapexe", File.WRITE);
	if (!F.ok())
	{
	    sapc.error("Can't save "+sapc.prog.OUT_DIR+main_class+".sapexe !\n");
	    return false;
	} else
	{
	    F.writeBytes(App.bytes(), 0, App.size());
	    F.close();
	}
	sapc.debug("ProgramWriter finished !\n");
	
	
	// Все нормально
	return true;
    }
    
    
    static int[] crc32_table=new int
    {
        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
        0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
        0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
        0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
        0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
        0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
        0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
        0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
        0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
        0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
        0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
        0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
        0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
        0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
        0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
        0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
        0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
        0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
        0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
        0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
        0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
        0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
        0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
        0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
        0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
        0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
        0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
        0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
        0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
        0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
        0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
        0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
    };
    
    
    static int NativeHash(String spec)
    {
        int crc=0xffffffff;
	
	
	for (int i=0; i<spec.length(); i++)
	{
	    byte b=(byte)spec.charAt(i);
	    
            crc=(crc >>> 8) ^ crc32_table[ (crc ^ b) & 0xff ];
        }
	
        crc=crc ^ 0xffffffff;
	
	return crc;
    }
}
