/**
 * Класс Pack предназначен для паковки и распаковки базовых типов short, int и float в последовательность байт.<br/>
 * При паковке используется формат little-endian (Intel-формат).
 */
class Pack
{
    /**
     * Распаковать short (2 байта) из массива байт
     *
     * @param b массив байт
     * @param offs смещение относительно начала массива, откуда следует читать данные
     * @return прочитанное число типа short
     */
    native static short r_short(byte[] b, int offs);
    
    
    /**
     * Запаковать short (2 байта) в массив байт
     *
     * @param x число для паковки
     * @param b массив байт
     * @param offs смещение относительно начала массика, куда следует записать данные
     */
    native static void w_short(short x, byte[] b, int offs);
    
    
    /**
     * Распаковать int (4 байта) из массива байт
     *
     * @param b массив байт
     * @param offs смещение относительно начала массива, откуда следует читать данные
     * @return прочитанное число типа int
     */
    native static int r_int(byte[] b, int offs);
    
    
    /**
     * Запаковать int (4 байта) в массив байт
     *
     * @param x число для паковки
     * @param b массив байт
     * @param offs смещение относительно начала массика, куда следует записать данные
     */
    native static void w_int(int x, byte[] b, int offs);
    
    
    /**
     * Распаковать float (4 байта) из массива байт
     *
     * @param b массив байт
     * @param offs смещение относительно начала массива, откуда следует читать данные
     * @return прочитанное число типа float
     */
    native static float r_float(byte[] b, int offs);
    
    
    /**
     * Запаковать float (4 байта) в массив байт
     *
     * @param x число для паковки
     * @param b массив байт
     * @param offs смещение относительно начала массика, куда следует записать данные
     */
    native static void w_float(float x, byte[] b, int offs);
}
