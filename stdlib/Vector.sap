/**
 * Предоставляет возможность создания автоматически расширяемого массива (вектора) объектов.<br/>
 * Хранимые элементы приводятся к типу Object.
 */
class Vector extends Object
{
    /**private**/
    Object[] elementData;
    
    /**private**/
    int elementCount;
    
    
    /**
     * Создает пустой вектор
     */
    native constructor();
    
    
    /**
     * Устанавливает размер вектора на количество реально использованных элементов.
     * Это позволяет оптимизировать использование памяти.
     */
    native void trimToSize();
    
    
    /**
     * Принудительно изменить размер вектора. Если новый размер больше старого, то
     * новые элементы заполнятся значением null. Если новый размер меньше старого, то
     * отрезанные элементы будут потеряны.
     *
     * @param newSize новый размер вектора
     */
    native void setSize(int newSize);
    
    
    /**
     * Возвращает количество элементов в векторе
     *
     * @return количество элементов в векторе
     */
    native int size();
    
    
    /**
     * Проверить, пуст ли вектор
     *
     * @return true, если вектор пуст, или false - если не пуст
     */
    native boolean isEmpty();
    
    
    /**
     * Возвращает элемент вектора с номером index
     *
     * @param index номер объекта для получения
     * @return элемент вектора с номером index
     */
    native Object elementAt(int index);
    
    
    /**
     * Изменить элемент в позиции index на obj
     *
     * @param obj объект для сохранения
     * @param index позиция для сохранения
     */
    native void setElementAt(Object obj, int index);
    
    
    /**
     * Удалить элемент, находящийся в указанной позиции. Элементы, находящиеся после него сдвинутся, чтобы не было пропуска.
     *
     * @param index номер элемента для удаления
     */
    native void removeElementAt(int index);
    
    
    /**
     * Вставить элемент в указанную позицию. Элементы после указанной позиции сдвигаются, чтобы освободить место для нового элемента
     *
     * @param obj объект для вставки
     * @param index позиция для вставки
     */
    native void insertElementAt(Object obj, int index);
    
    
    /**
     * Добавить элемент в конец вектора.
     *
     * @param obj элемент для добавления
     */
    native void add(Object obj);
    
    
    /**
     * Удалить все элементы вектора
     */
    native void removeAllElements();
    
    
    /**
     * Установить элемент в указанную позицию и вернуть находящийся там в прошлом элемент
     *
     * @param index позиция элемента
     * @param element новое значение для сохранения
     * @return элемент, ранее содержащийся в указанной позции
     */
    native Object set(int index, Object element);
    
    
    /**
     * Удалить элемент из указанной позиции и вернуть его
     *
     * @param index позиция элемента
     * @return удаленный элемент
     */
    native Object remove(int index);
    
    
    /**
     * Удалить первое вхождение указанного элемента в вектор
     *
     * @param obj элемент для удаления
     */
    native void removeElement(Object obj);
    
    
    /**
     * Добавить все элементы вектора <code>v</code> в конец этого вектора
     *
     * @param v вектор, из которого будут браться элементы для добавления
     */
    native void addAll(Vector v);
    
    
    /**
     * Проверяет, содержит ли вектор элемент <code>obj</code>.
     *
     * @return true, если элемент найден, или false - в ином случае
     */
    native boolean contains(Object obj);
}
