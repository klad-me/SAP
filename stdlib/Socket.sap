/**
 * Предоставляет функции работы по протоколу TCP/IP (только клиент)
 */
class Socket implements Stream
{
    // Сокет
    int sock=-1;
    
    
    /**
     * Создает неподключенный сокет.
     */
    constructor()
    {
    }
    
    
    /**
     * Подключается к TCP-порту. Данная операция блокирует выполняющий поток до успешного подключения или ошибки.
     *
     * @param addr IP-адрес сервера
     * @param port TCP-порт, к которому необходимо подключиться
     * @return true, если подключение завершилось успешно, или false - в случае ошибки
     */
    native boolean connect(byte[] addr, int port);
    
    
    /**
     * Возвращает количество доступных для чтения байт.
     *
     * @return количество доступных для чтения байт, или -1 в случае ошибки (разрыва соединения)
     */
    native int available();
    
    
    /**
     * Читает данные из сокета
     *
     * @param buf буфер для чтения
     * @param start начальный индекс в буфере для заполнения
     * @param count размер читаемых данных
     * @return количество прочитанных байт, или -1 в случае ошибки (разрыва соединения)
     */
    native int readBytes(byte[] buf, int start, int count);
    
    
    /**
     * Записывает данные в сокет
     *
     * @param buf буфер для записи
     * @param start начальный индекс в буфере
     * @param count размер записываемых данных
     * @return количество записанных байт, или -1 в случае ошибки (разрыва соединения)
     */
    native int writeBytes(byte[] buf, int start, int count);
    
    
    /**
     * Закрывает соединение.
     */
    native void close();
}
